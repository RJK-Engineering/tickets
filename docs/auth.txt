
https://laravel.com/docs/11.x/authentication

authentication
- login: form
    - store user on session, session uses cookie
- for API access, cookies are not typically used for authentication because there is no web browser
    - Instead: client sends API token to the API on each request
        - The application may validate the incoming token against a table of valid API tokens and "authenticate" the request as being performed by the user associated with that API token.

- Guards define how users are authenticated for each request. For example, Laravel ships with a session guard which maintains state using session storage and cookies.
- Providers define how users are retrieved from your persistent storage.
- authentication configuration file: config/auth.php
- Guards and providers (authentication) should not be confused with "roles" and "permissions" (authorization)
- Laravel Breeze starter kit: creates authentication controllers, routes, and views
- built-in authentication and session services: Auth and Session facades, cookie-based

Authentication Services
- browser: login form, store authenticated user in session, session using cookie
    - Application Starter Kits: Laravel Breeze, Laravel Jetstream, and Laravel Fortify.
- API: remote service sends API token on each request
    - API Authentication Services: Passport and Sanctum.
- not mutually exclusive.

- For monolithic Laravel application accessed using a browser:
    - built-in authentication services
- For API that will be consumed by third parties, API/SPA/mobile authentication
    - Passport or Sanctum to provide API token authentication

Sanctum
- will first determine if the request includes a session cookie that references an authenticated session.
- calls Laravel's built-in authentication services
    - If the request is not being authenticated via a session cookie: check for API token on request
- implementation
    - manually implement your own backend authentication routes
        - https://laravel.com/docs/11.x/authentication#authenticating-users
    - or utilize Laravel Fortify

Route middleware can be used to only allow authenticated users to access a given route.
- Route::get( ... )->middleware('auth');
- Route::get( ... )->middleware('auth:admin'); //use "admin" guard

Manually authenticate users
- Access Laravel's authentication services via the Auth facade
    class LoginController extends Controller
    use Illuminate\Support\Facades\Auth;
    if (Auth::attempt(email and password from request)) {

Sanctum
- stores user API tokens in a single database table and
- authenticate incoming HTTP requests via the Authorization header which should contain a valid API token
- authenticate single page applications
    - how different from second point ???????????????????????
        - does not use tokens but Laravel's built-in cookie based session authentication services
            - Laravel's web authentication guard
        - CSRF protection, session authentication

protect routes: attach the sanctum authentication guard
    - routes/web.php and routes/api.php

https://laravel.com/docs/11.x/authentication#authenticating-users
https://laravel.com/docs/11.x/sanctum
